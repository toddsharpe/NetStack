

#include "Net/Packet.h"
#include "Net/IPv4.h"
#include "Net/Udp.h"
#include "Test/NullMac.h"
#include "Net/NetIf.h"

using namespace Net;

//43	6.983737	127.0.0.1	127.0.0.1	ICMP	64	Echo(ping) request  id = 0x0001, seq = 4479 / 32529, ttl = 128 (reply in 44)
static constexpr uint8_t rx_icmp[] =
{
	0x45, 0x00, 0x00, 0x3c, 0xbf, 0xbb, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00,
	0x7f, 0x00, 0x00, 0x01, 0x7f, 0x00, 0x00, 0x01, 0x08, 0x00, 0x3b, 0xdc, 0x00, 0x01, 0x11, 0x7f,
	0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70,
	0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69,
};

static constexpr uint8_t rx_icmp_data[] =
{
	0x08, 0x00, 0x3b, 0xdc, 0x00, 0x01, 0x11, 0x7f, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68,
	0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x61,
	0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69
};

//356	5.525962	192.168.0.56	63.116.8.77	UDP	77	62641 -> 443 Len=35
static constexpr uint8_t rx_udp[] =
{
	0x45, 0x00,
	0x00, 0x3f, 0x22, 0x61, 0x40, 0x00, 0x80, 0x11, 0x00, 0x00, 0xc0, 0xa8, 0x00, 0x38, 0x3f, 0x74,
	0x08, 0x4d, 0xf4, 0xb1, 0x01, 0xbb, 0x00, 0x2b, 0x08, 0xde, 0x4c, 0xed, 0x14, 0xc2, 0x33, 0x96,
	0xa3, 0xd0, 0xf3, 0xb5, 0x63, 0x85, 0x12, 0x55, 0x38, 0x28, 0x5b, 0x57, 0x5a, 0x65, 0xee, 0x96,
	0x60, 0x36, 0xf8, 0xe4, 0xf5, 0x81, 0xbe, 0x17, 0x83, 0x6f, 0x51, 0x7f, 0x44
};

static constexpr uint8_t rx_udp_data[] =
{
	0xf4, 0xb1, 0x01, 0xbb, 0x00, 0x2b, 0x08, 0xde, 0x4c, 0xed, 0x14, 0xc2, 0x33, 0x96,
	0xa3, 0xd0, 0xf3, 0xb5, 0x63, 0x85, 0x12, 0x55, 0x38, 0x28, 0x5b, 0x57, 0x5a, 0x65, 0xee, 0x96,
	0x60, 0x36, 0xf8, 0xe4, 0xf5, 0x81, 0xbe, 0x17, 0x83, 0x6f, 0x51, 0x7f, 0x44
};

namespace
{
	Packet rx_packet;
	Packet tx_packet;

	void Receive(Net::NetIf& net_if, Packet& packet)
	{
		rx_packet = packet;
	}

	bool Send(Net::NetIf& net_if, Packet& packet)
	{
		tx_packet = packet;
		return true;
	}

	void Clear()
	{
		rx_packet.release();
		tx_packet.release();
	}

	NetLayer udp_icmp(Receive, Send);

	NullMac driver;
}

void Test_IPv4()
{
	/*
	 * Create interface.
	 */
	NetBindings test_bindings =
	{
		.udp = { Receive, Send},
		.icmp = { Receive, Send },
	};

	NetIf net_if(driver, { Receive, Send }, "Test", test_bindings);
	net_if.config.ip.addr = Net::localhost;
	net_if.config.ip.subnet_mask = Net::subnet_32;

	/*
	 * Receive icmp.
	 */
	{
		Packet packet;
		CopyTo(packet, rx_icmp);
		IPv4::Receive(net_if, packet);
		_ASSERT(packet.dst.addr == Net::localhost);
		_ASSERT(packet.src.addr == Net::localhost);
		_ASSERT(packet.length() == sizeof(rx_icmp_data));
		_ASSERT(memcmp(packet.buffer(), rx_icmp_data, sizeof(rx_icmp_data)) == 0);
	}

	/*
	 * Receive udp.
	 */
	{
		net_if.config.ip.addr = Net::build_ip(63, 116, 8, 77);
		
		Packet packet;
		CopyTo(packet, rx_udp);
		IPv4::Receive(net_if, packet);
		_ASSERT(packet.dst.addr == Net::build_ip(63, 116, 8, 77));
		_ASSERT(packet.src.addr == Net::build_ip(192, 168, 0, 56));
		_ASSERT(packet.length() == sizeof(rx_udp_data));
		_ASSERT(memcmp(packet.buffer(), rx_udp_data, sizeof(rx_udp_data)) == 0);
	}
}
