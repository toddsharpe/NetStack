#include "Test/Tests.h"
#include "Board.h"
#include "Blade.h"
#include "Net/Socket.h"
#include "Net/DhcpClient.h"

/*
 * Run tests.
 */
static void test()
{
	Test_SerialNet();
	Test_IPv4();
	Test_Net();
}

/*
 * Test data.
 */

//50	1.160746	35.186.224.9	192.168.0.56	UDP	70	443 -> 65236 Len=28
static constexpr uint8_t udp_uc_frame[] =
{
	0x01, 0x00, 0x00, 0x3E, 0xAA, 0xBB,
	0x45, 0x00,
	0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x40, 0x11, 0x79, 0xb1, 0x23, 0xba, 0xe0, 0x09, 0xc0, 0xa8,
	0x00, 0x38, 0x01, 0xbb, 0xfe, 0xd4, 0x00, 0x24, 0xc1, 0xc1, 0x54, 0xee, 0xbf, 0xbe, 0xec, 0xea,
	0xe1, 0x9b, 0x39, 0x3a, 0x7c, 0xda, 0xbf, 0xff, 0x70, 0x2c, 0xab, 0x82, 0xa2, 0xbd, 0x3c, 0x68,
	0x74, 0x94, 0xaf, 0x50, 0x00, 0xae
};

//238	6.157716	192.168.2.2	224.0.0.251	MDNS Len: 142 5353->5353
static constexpr uint8_t udp_mc_frame[] =
{
	0x01, 0x00, 0x00, 0x86, 0xAA, 0xBB,
	0x45, 0x00,
	0x00, 0x80, 0xef, 0x90, 0x40, 0x00, 0xff, 0x11, 0xe8, 0x35, 0xc0, 0xa8, 0x02, 0x02, 0xe0, 0x00,
	0x00, 0xfb, 0x14, 0xe9, 0x14, 0xe9, 0x00, 0x6c, 0xc2, 0xac, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2f, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x54, 0x56, 0x2d, 0x34,
	0x4b, 0x2d, 0x46, 0x46, 0x4d, 0x2d, 0x31, 0x65, 0x33, 0x33, 0x38, 0x39, 0x36, 0x31, 0x35, 0x61,
	0x61, 0x39, 0x62, 0x31, 0x39, 0x64, 0x32, 0x30, 0x63, 0x36, 0x63, 0x34, 0x31, 0x66, 0x33, 0x36,
	0x39, 0x65, 0x61, 0x35, 0x38, 0x30, 0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x63, 0x61,
	0x73, 0x74, 0x04, 0x5f, 0x74, 0x63, 0x70, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x00, 0x00, 0x21,
	0x00, 0x01, 0xc0, 0x0c, 0x00, 0x01, 0x00, 0x01, 0xc0, 0x0c, 0x00, 0x1c, 0x00, 0x01
};

static constexpr uint8_t udp_mc[] =
{
	0x45, 0x00,
	0x00, 0x80, 0xef, 0x90, 0x40, 0x00, 0xff, 0x11, 0xe8, 0x35, 0xc0, 0xa8, 0x02, 0x02, 0xe0, 0x00,
	0x00, 0xfb, 0x14, 0xe9, 0x14, 0xe9, 0x00, 0x6c, 0xc2, 0xac, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2f, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x54, 0x56, 0x2d, 0x34,
	0x4b, 0x2d, 0x46, 0x46, 0x4d, 0x2d, 0x31, 0x65, 0x33, 0x33, 0x38, 0x39, 0x36, 0x31, 0x35, 0x61,
	0x61, 0x39, 0x62, 0x31, 0x39, 0x64, 0x32, 0x30, 0x63, 0x36, 0x63, 0x34, 0x31, 0x66, 0x33, 0x36,
	0x39, 0x65, 0x61, 0x35, 0x38, 0x30, 0x0b, 0x5f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x63, 0x61,
	0x73, 0x74, 0x04, 0x5f, 0x74, 0x63, 0x70, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x00, 0x00, 0x21,
	0x00, 0x01, 0xc0, 0x0c, 0x00, 0x01, 0x00, 0x01, 0xc0, 0x0c, 0x00, 0x1c, 0x00, 0x01
};

// 10.248.0.0 -> 10.248.0.1
static constexpr uint8_t ping_request_frame[] =
{
	0x01, 0x00, 0x00, 0x42, 0xAA, 0xBB,
	0x45, 0x00, 0x00, 0x3c, 0xbf, 0xbf, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00,
	0x0A, 0xF8, 0x00, 0x00, 0x0A, 0xF8, 0x00, 0x01, 0x08, 0x00, 0x3b, 0xdb, 0x00, 0x01, 0x11, 0x80,
	0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70,
	0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69,
};

static constexpr uint8_t ping_response_frame[] =
{
	0x00, 0x01, 0x00, 0x42, 0xAA, 0xBB,
	0x45, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x40, 0x01, 0x00, 0x00,
	0x0A, 0xF8, 0x00, 0x01, 0x0A, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x43, 0xdb, 0x00, 0x01, 0x11, 0x80,
	0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70,
	0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69,
};

static constexpr uint8_t uc_frame[] =
{
	0x00, 0x01, 0x00, 0x26, 0xaa, 0xbb, 0x45, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x40, 0x11,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0xf8, 0x00, 0x00, 0x00, 0x29, 0x00, 0x45, 0x00, 0x0c,
	0x00, 0x00, 0xaa, 0xbb, 0xcc, 0xdd,
};

static constexpr uint8_t dhcp_discover[] =
{

	0x00, 0x01, 0x01, 0x16, 0xAA, 0xBB,
	0x45, 0x00, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x40, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xff, 0xff,	0xff, 0xff, 0x00, 0x44, 0x00, 0x43, 0x00, 0xFC, 0x00, 0x00, 0x01, 0x01, 0x06, 0x00,
	0x00, 0x00,	0x00, 0x01, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xde, 0xad, 0xc0, 0xde, 0xca, 0xfe, 0x00, 0x00,
	0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0x82, 0x53, 0x63, 0x35, 0x01, 0x01, 0xff,
};

static Blade blade;
int main(int argc, char** argv)
{
	/*
	 * Always test.
	 */
	test();

	/*
	 * Init.
	 */
	blade.Init();

	/*
	 * Multicast forwarding
	 */
	blade.Dispatch();
	blade.WriteUpstream(udp_mc_frame, sizeof(udp_mc_frame));
	blade.Dispatch();
	blade.VerifyPeerA(udp_mc_frame, sizeof(udp_mc_frame), sizeof(Net::SerialNet::serial_hdr_t));
	blade.VerifyPeerB(udp_mc_frame, sizeof(udp_mc_frame), sizeof(Net::SerialNet::serial_hdr_t));
	blade.Dispatch();


	/*
	 * Multicast reading.
	 */
	{
		Net::endpoint_t src = {};
		uint8_t buffer[512] = {};
		size_t bytes_read = 0;
		_ASSERT(Net::Socket::ReadUdp({ Net::build_ip(224, 0, 0, 251), 5353 }, src, buffer, sizeof(buffer), bytes_read));
		_ASSERT(src.addr == Net::build_ip(192, 168, 2, 2));
		_ASSERT(src.port == 5353);
	}

	/*
	 * Unicast forwarding.
	 */
	blade.Dispatch();
	blade.WriteUpstream(udp_uc_frame, sizeof(udp_uc_frame));
	blade.Dispatch();
	blade.VerifyPeerA(udp_uc_frame, sizeof(udp_uc_frame), sizeof(Net::SerialNet::serial_hdr_t));
	blade.Dispatch();

	/*
	 * Test ping.
	 */
	blade.Dispatch();
	blade.WriteUpstream(ping_request_frame, sizeof(ping_request_frame));
	blade.Dispatch();
	blade.VerifyUpstream(ping_response_frame, sizeof(ping_response_frame), 0);

	/*
	 * Write unicast data.
	 */
	blade.Dispatch();
	uint8_t buffer[] = { 0xAA, 0xBB, 0xCC, 0xDD };
	Net::Socket::SendUdp({ Net::build_ip(10, 248, 0, 0), 69 }, 0, buffer, sizeof(buffer));
	blade.Dispatch();
	blade.VerifyUpstream(uc_frame, sizeof(uc_frame), 0);
	blade.Dispatch();

	//TODO: verify

	/*
	 * DHCP.
	 */
	Net::DhcpClient client;
	client.Start();
	client.Dispatch();
	blade.Dispatch();
	blade.VerifyUpstream(dhcp_discover, sizeof(dhcp_discover), 0);

	/*
	 * Return.
	 */
	return 0;
}
